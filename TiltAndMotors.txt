// Adafruit Motor shield library
// copyright Adafruit Industries LLC, 2009
// this code is public domain, enjoy!

#include <AFMotor.h>
AF_DCMotor motor1(1, MOTOR12_64KHZ); // backright
AF_DCMotor motor2(2, MOTOR12_64KHZ); // create motor #2, 64KHz pwm
AF_DCMotor motor3(3, MOTOR34_1KHZ); // create motor #3, 1KHz pwm
AF_DCMotor motor4(4, MOTOR34_1KHZ); // create motor #4, 1KHz pwm
//
int leftLimit = 25;
int rightLimit = 24;
int left = 0; //left limit switch read value
int right = 0; //right limit switch read value

const int trigPin = 22;
const int echoPin = 23;
long duration;
float distance;

int tiltPin = 26; 
int currentRead; 
int previousRead = LOW; //debounce for tilt switch
long debounceTime = 50;

void setup()
{
  //Limit Switch + Power
  pinMode(left, INPUT);
  pinMode(right, INPUT);
  pinMode(50, OUTPUT);
  digitalWrite(50, HIGH);

  //Ultrasonic Pins + Power
  pinMode(trigPin, OUTPUT); 
  pinMode(echoPin, INPUT);
  pinMode(51, OUTPUT);
  digitalWrite(51, HIGH);

  //Tilt Switch 
  pinMode(tiltPin, INPUT);

  //Serial Output read
  Serial.begin(9600);
}

void loop()
{
    int tiltState; 
    currentRead = digitalRead(tiltPin);
    
  if (currentRead != previousRead) {
    // reset the debouncing timer
    debounceTime = millis();
  }

    if ((millis() - time) > debounce) {
     // whatever the switch is at, its been there for a long time
     // so lets settle on it!
     switchstate = reading;
 
    if (switchstate == HIGH) {
      motor1.run(FORWARD);
      motor1.setSpeed(255);  

      motor2.run(FORWARD);
      motor2.setSpeed(255); 

      motor3.run(FORWARD);
      motor3.setSpeed(255); 

      motor4.run(FORWARD);
      motor4.setSpeed(255);
    }
    else {
      motor1.run(FORWARD);
      motor1.setSpeed(215);  

      motor2.run(FORWARD);
      motor2.setSpeed(215); 

      motor3.run(FORWARD);
      motor3.setSpeed(215); 

      motor4.run(FORWARD);
      motor4.setSpeed(215);
    }
  }
 
  // Save the last reading so we keep a running tally
  previous = reading;
    
  /*
  //Read limit switch values
  left = digitalRead(leftLimit);
  right = digitalRead(rightLimit);
  
  // Clears the trigPin
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  
  // Sets the trigPin to LOW,HIGH, then LOW state for clean signal
  digitalWrite(trigPin, LOW);
  delayMicroseconds(5);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);
  
  // Calculating the distance
  distance = duration*0.034/2;*/
 
}